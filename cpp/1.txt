//CPP LST PAPER
1 2d array Matrix Using pointers(Dynamic)
2 Area of trangle, rectangle, circle using function overloading.
3 Swaping of two number using Template.
4 Operator Overloading Addition of complex number Using.
5 Polymorphism (Salary)create Virtual Function in class.
6 Exception (Evil/not Evil).

1.=====================
#include<iostream>
using namespace std;
        int main()
        {
                int (*arr)[10]= new int[10][10];

int n;
cout<<"Enter size of matrix n*n "<<endl;
cin>>n;
                for(int i= 0; i<n; i++)
                {
                        for(int j=0; j<n; j++)
                        {
                                cout<<"Enter Element : ";
                                cin>>arr[i][j];
                        }
                }

                for(int i= 0; i<n; i++)
                {
                        for(int j=0; j<n; j++)
                        {
                                cout<<arr[i][j]<<"\t";
                        }
                        cout<<endl;
                }
                return 0;
        }

2.==========================================================
#include <iostream> 
using namespace std;
 
class Shape {
   protected:
      int width, height;
      
   public:
      Shape( int a = 0, int b = 0){
         width = a;
         height = b;
      }
      int area() {
         cout << "Parent class area :" <<endl;
         return 0;
      }
};
class Rectangle: public Shape {
   public:
      Rectangle( int a = 0, int b = 0):Shape(a, b) { }
      
      int area () { 
         cout << "Rectangle class area :" <<endl;
         return (width * height); 
      }
};

class Triangle: public Shape {
   public:
      Triangle( int a = 0, int b = 0):Shape(a, b) { }
      
      int area () { 
         cout << "Triangle class area :" <<endl;
         return (width * height / 2); 
      }
};

// Main function for the program
int main() {
   Shape *shape;
   Rectangle rec(10,7);
   Triangle  tri(10,5);

   // store the address of Rectangle
   shape = &rec;
   
   // call rectangle area.
   shape->area();

   // store the address of Triangle
   shape = &tri;
   
   // call triangle area.
   shape->area();
   
   return 0;
}
3.=============================================
#include<iostream>
using namespace std;

template<class T>
T swap(T a, T b)
{
        a=a*b;
        b=a/b;
        a=a/b;
        cout<<"After Swaping : "<<a<<" "<<b<<endl;
}         
int main()
{       
//int c,d;
//cout<<"Enter N1"<<endl;
//cin>>c;
//cout<<"Enter N2"<<endl;
//cin>>d;
        swap(2,3); 
        swap<float>(3.0,4.5);  
        return 0;
}   
  
4.=============================================
// Operator Overloading 
#include<iostream> 
using namespace std; 
   
class Complex { 
private: 
    int real, imag; 
public: 
    Complex(int r = 0, int i =0)  {real = r;   imag = i;} 
       
    // This is automatically called when '+' is used with 
    // between two Complex objects 
    Complex operator + (Complex const &obj) { 
         Complex res; 
         res.real = real + obj.real; 
         res.imag = imag + obj.imag; 
         return res; 
    } 
    void print() { cout << real << " + i" << imag << endl; } 
}; 
   
int main() 
{ 
    Complex c1(10, 5), c2(2, 4); 
    Complex c3 = c1 + c2; // An example call to "operator+" 
    c3.print(); 
} 
Output:

12 + i9

5.==============================================================
#include<iostream>
using namespace std;

class Employee
{
        public:
        string var1;
        string var2;
        double salary;
 
        public:
        Employee(string fname,string lname,double esalary)
        {
                var1= fname;
                var2= lname;
                salary= esalary;
        }
        void display()
        {
                cout<<"FIRst name : "<<var1<<endl;
                cout<<"Last name : "<<var2<<endl;
                cout<<"Salary : "<<salary<<endl;
        }
  virtual void findSalary()
        {
                cout<<"Final Salary : Base"<<salary<<endl;
        }
};
class Regular : public Employee
{
        public:
         Regular(string fname,string lname,double esalary):
                Employee(fname,lname,esalary){ }
          void findSalary()
        {
                double HRA,TA,DA;
                HRA=0.3*salary;
                TA=0.2*salary;
                DA=0.5*salary;
                salary = salary+HRA+TA+DA;
                cout<<"Final Salary : "<<salary<<endl;
        }
};

class Contract : public Employee
{
        public:
        Contract(string fname,string lname,double esalary):
                Employee(fname,lname,esalary){ }
};

int main()
{
        //Employee* emp("SAGAR","Thakare",1200.00);
        Employee* emp;
        Regular r("SAGAR","Thakare",1200.00);
       // Contract c("SAGAR","Thakare",1200.00);
        emp = &r;
        //emp =&c;
        emp->display();
        emp->findSalary();
        return 0;
}

